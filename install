#!/usr/bin/env python3

import requests
import subprocess
import os
import shutil

from zipfile import ZipFile
from stat import S_IEXEC
from json import loads
from sys import stderr

config = loads(open('config.json', 'r').read())

APKTOOLURL = config["url"]["apktool"]
BUILDTOOLSURL = config["url"]["build-tools"]

TOOLSDIR = config["directory"]["tools"]
APKTOOLDIR = config["directory"]["apktool"]
BUILDTOOLSDIR = config["directory"]["build-tools"]
JSCOMMAND = "jarsigner -verify " + TOOLSDIR + APKTOOLDIR + "apktool.jar"

class bcolors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

if not os.path.exists(TOOLSDIR+APKTOOLDIR):
    os.makedirs(TOOLSDIR+APKTOOLDIR)

print(bcolors.OKBLUE + "Preparing dependencies" + bcolors.ENDC)
print("Downloading: apktools", end = '', flush=True)
apktoolDownloadLink = requests.get(APKTOOLURL).json()["assets"][0]["browser_download_url"]
apktoolFile = requests.get(apktoolDownloadLink, allow_redirects=True)
open(TOOLSDIR+APKTOOLDIR+"apktool.jar", 'wb').write(apktoolFile.content)
print(" ["+bcolors.OKGREEN+'*'+bcolors.ENDC+']')


print("Checking: jarsigner", end = '', flush=True)
jsProcess = subprocess.Popen(JSCOMMAND.split(), stdout=subprocess.PIPE)
jsOutput, _ = jsProcess.communicate()
jsOutput = jsOutput.decode('utf-8')

if "jar is" not in jsOutput:
    stderr(" ["+bcolors.FAIL+'!'+bcolors.ENDC+']')
    stderr("jarsigner is not installed, please download the java sdk")
    stderr("https://openjdk.java.net/install/")
    exit()

print(" ["+bcolors.OKGREEN+'*'+bcolors.ENDC+']')

if not os.path.exists(TOOLSDIR+BUILDTOOLSDIR):
    os.makedirs(TOOLSDIR+BUILDTOOLSDIR)


print("Downloading: android build-tools", end = '', flush=True)
buildToolsFile = requests.get(BUILDTOOLSURL, allow_redirects=True)
open(TOOLSDIR+BUILDTOOLSDIR+"tmpTools.zip", 'wb').write(buildToolsFile.content)
print(" ["+bcolors.OKGREEN+'*'+bcolors.ENDC+']')

print("Preparing: android build-tools", end = '', flush=True)
btZip = ZipFile(TOOLSDIR+BUILDTOOLSDIR+"tmpTools.zip")
btZipMainDir = btZip.namelist()[0]
btZip.extractall(TOOLSDIR+BUILDTOOLSDIR)

#Remove the main directory extracted from the archive (move the files up a dir)
fileList = os.listdir(TOOLSDIR+BUILDTOOLSDIR+btZipMainDir)
fileList = [TOOLSDIR+BUILDTOOLSDIR+btZipMainDir+filename for filename in fileList]

for f in fileList:
    shutil.move(f, TOOLSDIR+BUILDTOOLSDIR)

os.rmdir(TOOLSDIR+BUILDTOOLSDIR+btZipMainDir)
os.remove(TOOLSDIR+BUILDTOOLSDIR+"tmpTools.zip")

#Chmod +x zipalign
zaStat = os.stat(TOOLSDIR+BUILDTOOLSDIR+"zipalign")
os.chmod(TOOLSDIR+BUILDTOOLSDIR+"zipalign", zaStat.st_mode | S_IEXEC)
print(" ["+bcolors.OKGREEN+'*'+bcolors.ENDC+']')

print("Done!")
print("Run ./aru -h to start using aru")
